generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DATABASE_URL")
  extensions = [pgvector(map: "vector", schema: "public")]
}

enum AgentStatus {
  STARTING
  ONLINE
  STOPPED
  ERROR
}

model agent {
  id              String      @id @map("id")
  projectName     String      @map("project_name")
  status          AgentStatus @default(STARTING) @map("status")
  lastHeartBeatAt DateTime    @map("last_heart_beat_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("agent")
}

enum ProjectStatus {
  SYNCING
  SYNCED
  ERROR
}

model project {
  id        String        @id @default(uuid()) @map("id")
  name      String        @map("name")
  status    ProjectStatus @default(SYNCING) @map("status")
  syncState Int           @default(0) @map("sync_state")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project")
}

model codeEmbedding {
  id             String                 @id @default(uuid()) @map("id")
  projectName    String                 @map("project_name")
  fileName       String                 @map("file_name")
  filePath       String                 @map("file_path")
  absolutePath   String                 @map("absolute_path")
  chunkText      String                 @map("chunk_text")
  chunkStart     Int                    @map("chunk_start")
  chunkEnd       Int                    @map("chunk_end")
  chunkStartLine Int                    @map("chunk_start_line")
  chunkEndLine   Int                    @map("chunk_end_line")
  description    String?                @map("description")
  embedding      Unsupported("vector")? @map("embedding")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("code_embedding")
}

enum ModelProvider {
  OLLAMA
  OPENAI

  @@map("model_provider")
}

enum WebSearchProvider {
  SERPER

  @@map("web_search_provider")
}

enum CacheProvider {
  REDIS

  @@map("cache_provider")
}

model settings {
  id      String @id @default(uuid()) @map("id")
  guyName String @unique @default("Codebase Guy") @map("guy_name")

  embeddingServiceUrl String @default("http://localhost:5050") @map("embedding_service_url")

  modelProvider           ModelProvider @default(OLLAMA) @map("model_provider")
  ollamaUrl               String        @default("http://localhost:11434") @map("ollama_url")
  openApiCompatibleApiUrl String?       @map("open_api_compatible_api_url")
  modelApiKey             String?       @map("model_api_key")

  weakModel      String @default("llama3.2:3b") @map("weak_model")
  strongModel    String @default("llama3:latest") @map("strong_model")
  reasoningModel String @default("llama3:latest") @map("reasoning_model")

  cacheEnabled  Boolean       @default(false) @map("cache_enabled")
  cacheProvider CacheProvider @default(REDIS) @map("cache_provider")
  redisHost     String?       @map("redis_host")
  redisPort     String?       @map("redis_port")

  webSearchEnabled  Boolean           @default(false) @map("web_search_enabled")
  webSearchProvider WebSearchProvider @default(SERPER) @map("web_search_provider")
  serperUrl         String?           @map("serper_url")
  serperApiKey      String?           @map("serper_api_key")

  allowAgenticMode Boolean @default(false) @map("allow_agentic_mode")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

enum ChatRole {
  user
  assistant
  system
  function

  @@map("chat_role")
}

model chat {
  id   String @id @default(uuid()) @map("id")
  name String @map("name")

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  chatMessage chatMessage[]

  @@map("chat")
}

model chatMessage {
  id      String   @id @default(uuid()) @map("id")
  role    ChatRole @map("role")
  content String   @map("content")
  relatedProjects Json? @map("related_projects")
  prompt String? @map("prompt")
  chainOfThought String? @map("chain_of_thought")
  webSearch Json? @map("web_search")
  references Json? @map("references")

  referenceChat   chat   @relation(fields: [referenceChatId], references: [id])
  referenceChatId String @map("reference_chat_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("chat_message")
}
